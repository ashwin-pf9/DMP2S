// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: cli.proto

package clipb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuthService_Login_FullMethodName    = "/grpc.AuthService/Login"
	AuthService_Register_FullMethodName = "/grpc.AuthService/Register"
)

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, AuthService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, AuthService_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility.
type AuthServiceServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthServiceServer struct{}

func (UnimplementedAuthServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}
func (UnimplementedAuthServiceServer) testEmbeddedByValue()                     {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	// If the following call pancis, it indicates UnimplementedAuthServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _AuthService_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _AuthService_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cli.proto",
}

const (
	CRUDPipelineService_GetUserPipelines_FullMethodName  = "/grpc.CRUDPipelineService/GetUserPipelines"
	CRUDPipelineService_CreatePipeline_FullMethodName    = "/grpc.CRUDPipelineService/CreatePipeline"
	CRUDPipelineService_GetPipelineStages_FullMethodName = "/grpc.CRUDPipelineService/GetPipelineStages"
)

// CRUDPipelineServiceClient is the client API for CRUDPipelineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CRUDPipelineServiceClient interface {
	GetUserPipelines(ctx context.Context, in *GetPipelinesRequest, opts ...grpc.CallOption) (*GetPipelinesResponse, error)
	CreatePipeline(ctx context.Context, in *CreatePipelineRequest, opts ...grpc.CallOption) (*CreatePipelineResponse, error)
	GetPipelineStages(ctx context.Context, in *GetPipelineStagesRequest, opts ...grpc.CallOption) (*GetPipelineStagesResponse, error)
}

type cRUDPipelineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCRUDPipelineServiceClient(cc grpc.ClientConnInterface) CRUDPipelineServiceClient {
	return &cRUDPipelineServiceClient{cc}
}

func (c *cRUDPipelineServiceClient) GetUserPipelines(ctx context.Context, in *GetPipelinesRequest, opts ...grpc.CallOption) (*GetPipelinesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPipelinesResponse)
	err := c.cc.Invoke(ctx, CRUDPipelineService_GetUserPipelines_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRUDPipelineServiceClient) CreatePipeline(ctx context.Context, in *CreatePipelineRequest, opts ...grpc.CallOption) (*CreatePipelineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePipelineResponse)
	err := c.cc.Invoke(ctx, CRUDPipelineService_CreatePipeline_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRUDPipelineServiceClient) GetPipelineStages(ctx context.Context, in *GetPipelineStagesRequest, opts ...grpc.CallOption) (*GetPipelineStagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPipelineStagesResponse)
	err := c.cc.Invoke(ctx, CRUDPipelineService_GetPipelineStages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CRUDPipelineServiceServer is the server API for CRUDPipelineService service.
// All implementations must embed UnimplementedCRUDPipelineServiceServer
// for forward compatibility.
type CRUDPipelineServiceServer interface {
	GetUserPipelines(context.Context, *GetPipelinesRequest) (*GetPipelinesResponse, error)
	CreatePipeline(context.Context, *CreatePipelineRequest) (*CreatePipelineResponse, error)
	GetPipelineStages(context.Context, *GetPipelineStagesRequest) (*GetPipelineStagesResponse, error)
	mustEmbedUnimplementedCRUDPipelineServiceServer()
}

// UnimplementedCRUDPipelineServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCRUDPipelineServiceServer struct{}

func (UnimplementedCRUDPipelineServiceServer) GetUserPipelines(context.Context, *GetPipelinesRequest) (*GetPipelinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPipelines not implemented")
}
func (UnimplementedCRUDPipelineServiceServer) CreatePipeline(context.Context, *CreatePipelineRequest) (*CreatePipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePipeline not implemented")
}
func (UnimplementedCRUDPipelineServiceServer) GetPipelineStages(context.Context, *GetPipelineStagesRequest) (*GetPipelineStagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPipelineStages not implemented")
}
func (UnimplementedCRUDPipelineServiceServer) mustEmbedUnimplementedCRUDPipelineServiceServer() {}
func (UnimplementedCRUDPipelineServiceServer) testEmbeddedByValue()                             {}

// UnsafeCRUDPipelineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CRUDPipelineServiceServer will
// result in compilation errors.
type UnsafeCRUDPipelineServiceServer interface {
	mustEmbedUnimplementedCRUDPipelineServiceServer()
}

func RegisterCRUDPipelineServiceServer(s grpc.ServiceRegistrar, srv CRUDPipelineServiceServer) {
	// If the following call pancis, it indicates UnimplementedCRUDPipelineServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CRUDPipelineService_ServiceDesc, srv)
}

func _CRUDPipelineService_GetUserPipelines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPipelinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRUDPipelineServiceServer).GetUserPipelines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRUDPipelineService_GetUserPipelines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRUDPipelineServiceServer).GetUserPipelines(ctx, req.(*GetPipelinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRUDPipelineService_CreatePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRUDPipelineServiceServer).CreatePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRUDPipelineService_CreatePipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRUDPipelineServiceServer).CreatePipeline(ctx, req.(*CreatePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRUDPipelineService_GetPipelineStages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPipelineStagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRUDPipelineServiceServer).GetPipelineStages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRUDPipelineService_GetPipelineStages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRUDPipelineServiceServer).GetPipelineStages(ctx, req.(*GetPipelineStagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CRUDPipelineService_ServiceDesc is the grpc.ServiceDesc for CRUDPipelineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CRUDPipelineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.CRUDPipelineService",
	HandlerType: (*CRUDPipelineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserPipelines",
			Handler:    _CRUDPipelineService_GetUserPipelines_Handler,
		},
		{
			MethodName: "CreatePipeline",
			Handler:    _CRUDPipelineService_CreatePipeline_Handler,
		},
		{
			MethodName: "GetPipelineStages",
			Handler:    _CRUDPipelineService_GetPipelineStages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cli.proto",
}

const (
	PipelineOrchestratorService_ExecutePipeline_FullMethodName = "/grpc.PipelineOrchestratorService/ExecutePipeline"
)

// PipelineOrchestratorServiceClient is the client API for PipelineOrchestratorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PipelineOrchestratorServiceClient interface {
	ExecutePipeline(ctx context.Context, in *ExecutePipelineRequest, opts ...grpc.CallOption) (*ExecutePipelineResponse, error)
}

type pipelineOrchestratorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPipelineOrchestratorServiceClient(cc grpc.ClientConnInterface) PipelineOrchestratorServiceClient {
	return &pipelineOrchestratorServiceClient{cc}
}

func (c *pipelineOrchestratorServiceClient) ExecutePipeline(ctx context.Context, in *ExecutePipelineRequest, opts ...grpc.CallOption) (*ExecutePipelineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecutePipelineResponse)
	err := c.cc.Invoke(ctx, PipelineOrchestratorService_ExecutePipeline_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PipelineOrchestratorServiceServer is the server API for PipelineOrchestratorService service.
// All implementations must embed UnimplementedPipelineOrchestratorServiceServer
// for forward compatibility.
type PipelineOrchestratorServiceServer interface {
	ExecutePipeline(context.Context, *ExecutePipelineRequest) (*ExecutePipelineResponse, error)
	mustEmbedUnimplementedPipelineOrchestratorServiceServer()
}

// UnimplementedPipelineOrchestratorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPipelineOrchestratorServiceServer struct{}

func (UnimplementedPipelineOrchestratorServiceServer) ExecutePipeline(context.Context, *ExecutePipelineRequest) (*ExecutePipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecutePipeline not implemented")
}
func (UnimplementedPipelineOrchestratorServiceServer) mustEmbedUnimplementedPipelineOrchestratorServiceServer() {
}
func (UnimplementedPipelineOrchestratorServiceServer) testEmbeddedByValue() {}

// UnsafePipelineOrchestratorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PipelineOrchestratorServiceServer will
// result in compilation errors.
type UnsafePipelineOrchestratorServiceServer interface {
	mustEmbedUnimplementedPipelineOrchestratorServiceServer()
}

func RegisterPipelineOrchestratorServiceServer(s grpc.ServiceRegistrar, srv PipelineOrchestratorServiceServer) {
	// If the following call pancis, it indicates UnimplementedPipelineOrchestratorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PipelineOrchestratorService_ServiceDesc, srv)
}

func _PipelineOrchestratorService_ExecutePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineOrchestratorServiceServer).ExecutePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineOrchestratorService_ExecutePipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineOrchestratorServiceServer).ExecutePipeline(ctx, req.(*ExecutePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PipelineOrchestratorService_ServiceDesc is the grpc.ServiceDesc for PipelineOrchestratorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PipelineOrchestratorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.PipelineOrchestratorService",
	HandlerType: (*PipelineOrchestratorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecutePipeline",
			Handler:    _PipelineOrchestratorService_ExecutePipeline_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cli.proto",
}
